{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["fetchData","url","setFn","fetch","then","r","json","j","getRate","x","y","Math","round","App","useState","data","setData","mas_data","setMasData","counter","setCounter","useEffect","c","setInterval","countInterval","countIntervalInit","confirmed","value","recovered","deaths","lastUpdate","Date","toDateString","toTimeString","mas_confirmed","mas_recovered","mas_deaths","console","dir","className","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oPAwEA,SAASA,EAAUC,EAAaC,GAC9BC,MAAMF,GACHG,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,MAAK,SAAAG,GAAC,OAAIL,EAAMK,MAYrB,SAASC,EAAQC,EAAWC,GAC1B,OAAOC,KAAKC,MAAOH,EAAIC,EAAK,KAAS,IAGxBG,MAnFf,WAAgB,IAAD,cACWC,mBAA8B,IADzC,mBACNC,EADM,KACAC,EADA,OAEkBF,mBAA8B,IAFhD,mBAENG,EAFM,KAEIC,EAFJ,OAGiBJ,mBAAS,GAH1B,mBAGNK,EAHM,KAGGC,EAHH,KAIbC,qBAAU,WACRrB,EATY,iCASOgB,GACnBhB,EATqB,+CASOkB,KAC3B,CAACC,IAEJE,qBAAU,YA6DZ,SAAuBD,GACrB,IAAIE,EAAI,EACR,OAAO,WACLC,aAAY,WACVH,EAAWE,OACV,OAjEuBE,CAAcJ,EACxCK,KACC,IAEH,IAAMC,EAAS,UAAGX,EAAKW,iBAAR,aAAG,EAAgBC,MAC5BC,EAAS,UAAGb,EAAKa,iBAAR,aAAG,EAAgBD,MAC5BE,EAAM,UAAGd,EAAKc,cAAR,aAAG,EAAaF,MACtBG,EAAaf,EAAKe,WAAL,UACZ,IAAIC,KAAKhB,EAAKe,YAAYE,eADd,YACgC,IAAID,KACjDhB,EAAKe,YACLG,gBACF,GAEEC,EAAa,UAAGjB,EAASS,iBAAZ,aAAG,EAAoBC,MACpCQ,EAAa,UAAGlB,EAASW,iBAAZ,aAAG,EAAoBD,MACpCS,EAAU,UAAGnB,EAASY,cAAZ,aAAG,EAAiBF,MAIpC,OAFAU,QAAQC,IAAIvB,GAGV,yBAAKwB,UAAU,OACb,yBAAKA,UAAU,OACb,gCACE,yBAAKC,IAnCI,oCAmCaC,IAAI,gBAG9B,yBAAKF,UAAU,cACb,yBAAKA,UAAU,WACb,uCACA,yCAAeb,GACf,yCAAeE,GACf,sCAAYC,GACZ,sCAAYH,EAAYE,EAAYC,GACpC,oDAAmBrB,EAAQqB,EAAQH,GAAnC,MACA,sDAAqBlB,EAAQoB,EAAWF,GAAxC,OAEF,yBAAKa,UAAU,OACb,wCACA,yCAAeL,GACf,yCAAeC,GACf,sCAAYC,GACZ,sCAAYF,EAAgBC,EAAgBC,GAC5C,oDAAmB5B,EAAQ4B,EAAYF,GAAvC,MACA,sDAAqB1B,EAAQ2B,EAAeD,GAA5C,QAGJ,yBAAKK,UAAU,QACb,2CAAiBT,MCrDLY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjD,MAAK,SAAAkD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.83e0f00a.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.scss\";\n\nconst API_URL = \"https://covid19.mathdro.id/api\";\nconst MALAYSIA_API_URL = \"https://covid19.mathdro.id/api/countries/MYS\";\nconst OG_API_URL = \"https://covid19.mathdro.id/api/og\";\n\nfunction App() {\n  const [data, setData] = useState<Record<string, any>>({});\n  const [mas_data, setMasData] = useState<Record<string, any>>({});\n  const [counter, setCounter] = useState(0);\n  useEffect(() => {\n    fetchData(API_URL, setData);\n    fetchData(MALAYSIA_API_URL, setMasData);\n  }, [counter]);\n\n  useEffect(() => {\n    const countIntervalInit = countInterval(setCounter);\n    countIntervalInit();\n  }, []);\n\n  const confirmed = data.confirmed?.value;\n  const recovered = data.recovered?.value;\n  const deaths = data.deaths?.value;\n  const lastUpdate = data.lastUpdate\n    ? `${new Date(data.lastUpdate).toDateString()} ${new Date(\n        data.lastUpdate\n      ).toTimeString()}`\n    : \"\";\n\n  const mas_confirmed = mas_data.confirmed?.value;\n  const mas_recovered = mas_data.recovered?.value;\n  const mas_deaths = mas_data.deaths?.value;\n\n  console.dir(data);\n\n  return (\n    <div className=\"App\">\n      <div className=\"img\">\n        <figure>\n          <img src={OG_API_URL} alt=\"Not Found\"/>\n        </figure>\n      </div>\n      <div className=\"header ibc\">\n        <div className=\"overall\">\n          <h1>Overall</h1>\n          <p>Confirmed: {confirmed}</p>\n          <p>Recovered: {recovered}</p>\n          <p>Deaths: {deaths}</p>\n          <p>Active: {confirmed - recovered - deaths}</p>\n          <p>Fatal Rate: {`${getRate(deaths, confirmed)}%`}</p>\n          <p>Recover Rate: {`${getRate(recovered, confirmed)}%`}</p>\n        </div>\n        <div className=\"mas\">\n          <h1>Malaysia</h1>\n          <p>Confirmed: {mas_confirmed}</p>\n          <p>Recovered: {mas_recovered}</p>\n          <p>Deaths: {mas_deaths}</p>\n          <p>Active: {mas_confirmed - mas_recovered - mas_deaths}</p>\n          <p>Fatal Rate: {`${getRate(mas_deaths, mas_confirmed)}%`}</p>\n          <p>Recover Rate: {`${getRate(mas_recovered, mas_confirmed)}%`}</p>\n        </div>\n      </div>\n      <div className=\"date\">\n        <p>Last Update: {lastUpdate}</p>\n      </div>\n      \n    </div>\n  );\n}\n\nfunction fetchData(url: string, setFn: React.Dispatch<{}>) {\n  fetch(url)\n    .then(r => r.json())\n    .then(j => setFn(j));\n}\n\nfunction countInterval(setCounter: React.Dispatch<number>) {\n  let c = 0;\n  return function() {\n    setInterval(() => {\n      setCounter(c++);\n    }, 30000);\n  };\n}\n\nfunction getRate(x: number, y: number) {\n  return Math.round((x / y) * 10000) / 100;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}